---
title: Communities in Networks
format: 
  revealjs:
    css: /resources/custom_css.css
    theme: white
    progress: true
    transition: convex
    reveal_plugins: ['notes']
---


```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_knit$set(root.dir = './')
library(igraph)
library(tidygraph)
library(ggraph)
theme_set(theme_graph())
```

```{r,message=F}

#install.packages('igraphdata') # Run this if it isn't installed yet
library(igraphdata)
data("UKfaculty")

UK <- as_tbl_graph(UKfaculty)

UK <- UK |>
  activate(edges) |>
  filter(edge_is_mutual()) |>
  to_undirected() |>
  simplify() |>
  as_tbl_graph()
```

## Networks are "groupy"

> - Network formation processes lead to "groupy" networks

<div class='container'>
<div class='col'>
>	- Foci (Scott Feld)
>	- Triadic closure
>	- Homophily
</div>

<div class='col'>
```{r,message=F}
UK |>
  activate(edges) |>
  ggraph() +
  geom_edge_fan(alpha=.4) +
  geom_node_point(aes(color=as.factor(Group))) +
  scale_color_viridis_d(name="Department")
```
</div>
</div>

## We may want to identify groups

> - Understanding where information is likely to flow / be held in common
> - Social media marketers identifying "interest groups"
> - Researchers understanding a scientific field
> - Understanding relationships between groups

## Early approaches to identify groups

> - Components
>	- Everyone connected in any way
>	- Usually not useful - (nearly) everyone is connected
> - Cliques
>	- Everyone is connected to everyone else in group
>	- Expanded to n-cliques (everyone in group is at a distance of  _n_ or less from everyone else)
>	- Long, stringy groupings

## Clique Example

<div class='fragment'>
```{r,message=F}
clique_nodes <- largest_cliques(UK)[[1]]
UK |> 
  activate(nodes) |>
  mutate(idx = 1:nrow(.N())) |> # Create an index for the nodes
  mutate(in_clique = idx %in% clique_nodes) |> # If the index is one of the clique nodes
ggraph(layout = 'stress') +
  geom_edge_fan(alpha=.3) +
  geom_node_point(aes(color=in_clique)) + # Color by whether the node is in the clique
  scale_color_viridis_d(name='In largest clique')
```
</div>

# Early approaches (continued)

> - K-plexes
>	- All members of group are connected to all but _k_ other members


## Modern approaches - community detection

> - Modularity
>	-  Maximize edges within communities and minimize edges between them
> - Agglomeration
>	- Add nodes/groups that are closely connected
> - Reduction
>	- Remove edges with high betweenness
> - Random walk
>	- "Walk" through the network many times
> - Often quite similar


## Fast Greedy Example

<div class='fragment'>
```{r,message=F}
UK |>
  activate(nodes) |>
  mutate(community = as.factor(group_fast_greedy())) |>
ggraph(layout = 'stress') +
  geom_edge_fan(alpha=.3) +
  geom_node_point(aes(color=community)) +
  scale_color_viridis_d(name='Fast Greedy Communities')
```
</div>

# Core and Periphery

## Many groups have a core and a periphery

> - New people start on the periphery (Legitimate Peripheral Participation)
> - People leaving move to the periphery
> - Different levels of dedication / resources
> - Evolutionary perspective
>	- In order for groups to survive, there has to be a core

## Implications

> - Those in core more likely to have knowledge, experience, and to stick around
> - Identify the most dedicated group
> - Identify those in danger of leaving / needing help

## Ways of measuring

> - Block modeling

<img class='fragment' src="https://upload.wikimedia.org/wikipedia/commons/9/93/Core-Periphery_Matrix.png"/>

## Ways of measuring

<div class='container'>
<div class='col'>
> - K-cores
>	- Every node gets a value: the largest _k_ where they are in a subgraph where everyone else has degree of at least _k_
> - Rich-club coefficient
>	- How much are those with high degree connected to each other
</div>

<div class='col fragment'>
```{r,message=F}

UK |>
  activate(nodes) |>
  mutate(coreness = node_coreness()) |>
ggraph(layout='stress') +
  geom_edge_fan(alpha=.3) +
  geom_node_point(aes(color=coreness)) +
  scale_color_viridis_c(name='Coreness')

```
</div>
</div>
